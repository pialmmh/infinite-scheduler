# ============================================
# LXD Container Build Configuration
# ============================================
# This config is used ONLY for building the container image
# Maven: mvn clean package lxd:build
#
# Runtime/launch configuration is handled by deployment agent separately

# ============================================
# APPLICATION IDENTITY
# ============================================
APP_NAME="infinite-scheduler"
APP_VERSION="1.0.0"
CONTAINER_VERSION="1"

# ============================================
# BUILD INTEGRATION
# ============================================
# Where to build the LXC image (orchestrix repo path)
ORCHESTRIX_BUILD_PATH="/home/mustafa/telcobright-projects/orchestrix-lxc-work/images/lxc/quarkus-runtime"

# Base image to build from (must exist in LXD)
BASE_IMAGE="local:quarkus-base-v1"

# ============================================
# RESOURCE METADATA (for documentation)
# ============================================
# These are informational defaults
# Deployment agent can override at launch time

MEMORY_LIMIT="1GB"
CPU_LIMIT="2"
STORAGE_QUOTA_SIZE="5G"

# ============================================
# NETWORK CONFIGURATION
# ============================================
# Port the application listens on (from application.properties)
APP_PORT="8081"

# Promtail metrics port
PROMTAIL_PORT="9080"

# ============================================
# JAVA CONFIGURATION
# ============================================
JAVA_VERSION="21"
JVM_OPTS="-Xms256m -Xmx768m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"

# ============================================
# LOGGING CONFIGURATION
# ============================================
# Promtail version (must match base image)
PROMTAIL_VERSION="2.9.4"

# Log format (app must output JSON for parsing)
LOG_FORMAT="json"

# Log file path inside container
LOG_FILE_PATH="/var/log/${APP_NAME}"

# Loki endpoint (where Promtail ships logs)
# This is configured at BUILD time, baked into the image
LOKI_HOST="10.10.199.200"
LOKI_PORT="3100"

# ============================================
# LOG ROTATION
# ============================================
# Prevent logs from filling up storage
LOG_ROTATE_ENABLED="true"
LOG_ROTATE_MAX_SIZE="1G"          # Rotate when file reaches this size
LOG_ROTATE_MAX_AGE="7"            # Keep logs for 7 days
LOG_ROTATE_MAX_FILES="10"         # Keep max 10 rotated files
LOG_ROTATE_COMPRESS="true"        # Compress old logs with gzip
LOG_ROTATE_SCHEDULE="daily"       # Check daily for rotation

# ============================================
# BUILD OPTIONS
# ============================================
# Export container as tarball after build
EXPORT_CONTAINER="true"

# Create snapshot during build
CREATE_SNAPSHOT="false"

# ============================================
# BUILD METADATA (auto-filled by Maven)
# ============================================
GIT_COMMIT_SHA=""
BUILD_TIMESTAMP=""
BUILT_BY=""

# ============================================
# OUTPUT
# ============================================
# Maven will create:
# - JAR: target/${APP_NAME}-${APP_VERSION}.jar
# - Image: ${APP_NAME}-v${CONTAINER_VERSION}-${BUILD_TIMESTAMP}.tar.gz
# - Location: ${ORCHESTRIX_BUILD_PATH}/${APP_NAME}-v.${CONTAINER_VERSION}/generated/artifact/
#
# The image contains:
# - Application JAR (with application.properties inside)
# - Promtail binary (from base image)
# - Promtail config (configured to ship to http://${LOKI_HOST}:${LOKI_PORT})
# - Systemd services (app + promtail)
# - Logrotate config (rotates logs at ${LOG_ROTATE_MAX_SIZE}, keeps ${LOG_ROTATE_MAX_FILES} files)
#
# When container starts:
# - Application starts and writes logs to ${LOG_FILE_PATH}
# - Promtail automatically ships logs to Loki at ${LOKI_HOST}:${LOKI_PORT}
# - Logrotate runs ${LOG_ROTATE_SCHEDULE}, keeps storage under control
#
# Deployment agent will:
# - Import this image
# - Create launch config with runtime values (instance name, IP, secrets, etc.)
# - Launch instances
# - Logs automatically ship to Loki (already configured)
# - Logs automatically rotate (already configured)
