package com.telcobright.scheduler;

import com.telcobright.scheduler.examples.SmsEntity;
import com.telcobright.scheduler.examples.SmsJob;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

public class MonitoringDemoTest {
    
    @Test
    public void testMonitoringWithDummyJobs() {
        try {
            SchedulerConfig config = SchedulerConfig.builder()
                .fetchInterval(5)               // Fetch every 5 seconds for quick demo
                .lookaheadWindow(30)            // Look 30 seconds ahead
                .mysqlHost("127.0.0.1")
                .mysqlPort(3306)
                .mysqlDatabase("scheduler")
                .mysqlUsername("root")
                .mysqlPassword("123456")
                .repositoryDatabase("scheduler")
                .repositoryTablePrefix("sms_demo")
                .maxJobsPerFetch(100)
                .autoCreateTables(true)
                .autoCleanupCompletedJobs(true)
                .cleanupIntervalMinutes(5)
                .build();
            
            InfiniteScheduler<SmsEntity> scheduler =
                new InfiniteScheduler<>(SmsEntity.class, config, SmsJob.class);
            
            System.out.println("\n=== CREATING 10 DEMO SMS JOBS (2 per minute) ===");
            
            // Create exactly 10 SMS jobs: 2 jobs per minute (30-second intervals)
            LocalDateTime now = LocalDateTime.now();
            
            try {
                for (int i = 0; i < 10; i++) {
                    LocalDateTime scheduledTime = now.plusSeconds(5 + (i * 20)); // 5s, 25s, 45s, etc.
                    
                    SmsEntity smsEntity = new SmsEntity();
                    // ID is automatically generated as UUID in constructor
                    // jobId is automatically generated by SchedulableEntity interface
                    smsEntity.setPhoneNumber("+1234567" + String.format("%03d", i));
                    smsEntity.setMessage("Demo SMS message #" + (i + 1) + " - Hello World!");
                    smsEntity.setStatus("PENDING");
                    smsEntity.setScheduled(false); // Not yet scheduled to Quartz
                    smsEntity.setScheduledTime(scheduledTime);
                    
                    scheduler.getRepository().insert(smsEntity);
                    
                    System.out.println("Created SMS job: " + smsEntity.getJobId() + 
                        " -> " + smsEntity.getPhoneNumber() + " at " + scheduledTime);
                }
            } catch (Exception e) {
                System.err.println("Failed to insert demo jobs: " + e.getMessage());
                throw e;
            }
            
            System.out.println("\n=== STARTING SCHEDULER WITH MONITORING ===");
            System.out.println("Watch the real-time monitoring output below...\n");
            
            scheduler.start();
            
            // Let it run for 6 minutes to see all 10 jobs execute (5 minutes + buffer)
            Thread.sleep(360000); // 6 minutes
            
            scheduler.stop();
            System.out.println("\n=== DEMO COMPLETED ===");
            
        } catch (Exception e) {
            System.err.println("DEMO FAILED: " + e.getMessage());
            e.printStackTrace();
        }
    }
}